// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// c_cumema
NumericVector c_cumema(NumericVector& X, NumericVector& days, double theta);
RcppExport SEXP VSR_c_cumema(SEXP XSEXP, SEXP daysSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type days(daysSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    __result = Rcpp::wrap(c_cumema(X, days, theta));
    return __result;
END_RCPP
}
// c_ema
NumericVector c_ema(NumericVector& X, NumericVector& days, double theta);
RcppExport SEXP VSR_c_ema(SEXP XSEXP, SEXP daysSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type days(daysSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    __result = Rcpp::wrap(c_ema(X, days, theta));
    return __result;
END_RCPP
}
// c_ema_lin
NumericVector c_ema_lin(NumericVector& X, NumericVector& days, double theta);
RcppExport SEXP VSR_c_ema_lin(SEXP XSEXP, SEXP daysSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type days(daysSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    __result = Rcpp::wrap(c_ema_lin(X, days, theta));
    return __result;
END_RCPP
}
// c_ediversity
NumericVector c_ediversity(IntegerVector& X, int N, double theta);
RcppExport SEXP VSR_c_ediversity(SEXP XSEXP, SEXP NSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    __result = Rcpp::wrap(c_ediversity(X, N, theta));
    return __result;
END_RCPP
}
// c_cum_unique_count
IntegerVector c_cum_unique_count(IntegerVector& X, int N);
RcppExport SEXP VSR_c_cum_unique_count(SEXP XSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    __result = Rcpp::wrap(c_cum_unique_count(X, N));
    return __result;
END_RCPP
}
// c_rdmean_pow
NumericVector c_rdmean_pow(NumericVector x, NumericVector w, NumericVector p);
RcppExport SEXP VSR_c_rdmean_pow(SEXP xSEXP, SEXP wSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    __result = Rcpp::wrap(c_rdmean_pow(x, w, p));
    return __result;
END_RCPP
}
// c_apk1
double c_apk1(const int k, const int actual, const IntegerVector& predicted);
RcppExport SEXP VSR_c_apk1(SEXP kSEXP, SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type predicted(predictedSEXP);
    __result = Rcpp::wrap(c_apk1(k, actual, predicted));
    return __result;
END_RCPP
}
// top_index
IntegerVector top_index(SEXP x, int n, bool ascending);
RcppExport SEXP VSR_top_index(SEXP xSEXP, SEXP nSEXP, SEXP ascendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< bool >::type ascending(ascendingSEXP);
    __result = Rcpp::wrap(top_index(x, n, ascending));
    return __result;
END_RCPP
}
// c_fast_paste0
std::vector< std::string > c_fast_paste0(std::vector<std::string>& str1, std::vector<std::string>& str2);
RcppExport SEXP VSR_c_fast_paste0(SEXP str1SEXP, SEXP str2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type str1(str1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type str2(str2SEXP);
    __result = Rcpp::wrap(c_fast_paste0(str1, str2));
    return __result;
END_RCPP
}
// c_tab
List c_tab(SEXP x);
RcppExport SEXP VSR_c_tab(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    __result = Rcpp::wrap(c_tab(x));
    return __result;
END_RCPP
}
