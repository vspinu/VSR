// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// c_cumema
NumericVector c_cumema(NumericVector& X, NumericVector& days, double n);
RcppExport SEXP _VSR_c_cumema(SEXP XSEXP, SEXP daysSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type days(daysSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(c_cumema(X, days, n));
    return rcpp_result_gen;
END_RCPP
}
// c_ema
NumericVector c_ema(NumericVector& X, NumericVector& days, double n);
RcppExport SEXP _VSR_c_ema(SEXP XSEXP, SEXP daysSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type days(daysSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(c_ema(X, days, n));
    return rcpp_result_gen;
END_RCPP
}
// c_ema_lin
NumericVector c_ema_lin(NumericVector& X, NumericVector& days, double n);
RcppExport SEXP _VSR_c_ema_lin(SEXP XSEXP, SEXP daysSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type days(daysSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(c_ema_lin(X, days, n));
    return rcpp_result_gen;
END_RCPP
}
// c_ediversity
NumericVector c_ediversity(IntegerVector& X, int N, double n);
RcppExport SEXP _VSR_c_ediversity(SEXP XSEXP, SEXP NSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(c_ediversity(X, N, n));
    return rcpp_result_gen;
END_RCPP
}
// c_cum_unique_count
IntegerVector c_cum_unique_count(IntegerVector& X, int N);
RcppExport SEXP _VSR_c_cum_unique_count(SEXP XSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(c_cum_unique_count(X, N));
    return rcpp_result_gen;
END_RCPP
}
// c_rdmean_pow
NumericVector c_rdmean_pow(NumericVector x, NumericVector w, NumericVector p);
RcppExport SEXP _VSR_c_rdmean_pow(SEXP xSEXP, SEXP wSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(c_rdmean_pow(x, w, p));
    return rcpp_result_gen;
END_RCPP
}
// c_apk1
double c_apk1(const int k, const int actual, const IntegerVector& predicted);
RcppExport SEXP _VSR_c_apk1(SEXP kSEXP, SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(c_apk1(k, actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// c_ob_margin
List c_ob_margin(NumericVector& X, NumericVector& V, IntegerVector& side);
RcppExport SEXP _VSR_c_ob_margin(SEXP XSEXP, SEXP VSEXP, SEXP sideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type V(VSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type side(sideSEXP);
    rcpp_result_gen = Rcpp::wrap(c_ob_margin(X, V, side));
    return rcpp_result_gen;
END_RCPP
}
// c_ob_exp_sum
List c_ob_exp_sum(NumericVector& price, NumericVector& size, IntegerVector& side, NumericVector& focals, NumericVector& ns);
RcppExport SEXP _VSR_c_ob_exp_sum(SEXP priceSEXP, SEXP sizeSEXP, SEXP sideSEXP, SEXP focalsSEXP, SEXP nsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type price(priceSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type side(sideSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type focals(focalsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type ns(nsSEXP);
    rcpp_result_gen = Rcpp::wrap(c_ob_exp_sum(price, size, side, focals, ns));
    return rcpp_result_gen;
END_RCPP
}
// c_roll_min
NumericVector c_roll_min(SEXP DATE, NumericVector& X, double left_bound, double right_bound, bool left_open, bool right_open);
RcppExport SEXP _VSR_c_roll_min(SEXP DATESEXP, SEXP XSEXP, SEXP left_boundSEXP, SEXP right_boundSEXP, SEXP left_openSEXP, SEXP right_openSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type DATE(DATESEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type left_bound(left_boundSEXP);
    Rcpp::traits::input_parameter< double >::type right_bound(right_boundSEXP);
    Rcpp::traits::input_parameter< bool >::type left_open(left_openSEXP);
    Rcpp::traits::input_parameter< bool >::type right_open(right_openSEXP);
    rcpp_result_gen = Rcpp::wrap(c_roll_min(DATE, X, left_bound, right_bound, left_open, right_open));
    return rcpp_result_gen;
END_RCPP
}
// c_roll_max
NumericVector c_roll_max(SEXP DATE, NumericVector& X, double left_bound, double right_bound, bool left_open, bool right_open);
RcppExport SEXP _VSR_c_roll_max(SEXP DATESEXP, SEXP XSEXP, SEXP left_boundSEXP, SEXP right_boundSEXP, SEXP left_openSEXP, SEXP right_openSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type DATE(DATESEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type left_bound(left_boundSEXP);
    Rcpp::traits::input_parameter< double >::type right_bound(right_boundSEXP);
    Rcpp::traits::input_parameter< bool >::type left_open(left_openSEXP);
    Rcpp::traits::input_parameter< bool >::type right_open(right_openSEXP);
    rcpp_result_gen = Rcpp::wrap(c_roll_max(DATE, X, left_bound, right_bound, left_open, right_open));
    return rcpp_result_gen;
END_RCPP
}
// c_roll_mean
NumericVector c_roll_mean(SEXP DATE, NumericVector& X, double left_bound, double right_bound, bool left_open, bool right_open);
RcppExport SEXP _VSR_c_roll_mean(SEXP DATESEXP, SEXP XSEXP, SEXP left_boundSEXP, SEXP right_boundSEXP, SEXP left_openSEXP, SEXP right_openSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type DATE(DATESEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type left_bound(left_boundSEXP);
    Rcpp::traits::input_parameter< double >::type right_bound(right_boundSEXP);
    Rcpp::traits::input_parameter< bool >::type left_open(left_openSEXP);
    Rcpp::traits::input_parameter< bool >::type right_open(right_openSEXP);
    rcpp_result_gen = Rcpp::wrap(c_roll_mean(DATE, X, left_bound, right_bound, left_open, right_open));
    return rcpp_result_gen;
END_RCPP
}
// c_roll_sd
NumericVector c_roll_sd(SEXP DATE, NumericVector& X, double left_bound, double right_bound, bool left_open, bool right_open);
RcppExport SEXP _VSR_c_roll_sd(SEXP DATESEXP, SEXP XSEXP, SEXP left_boundSEXP, SEXP right_boundSEXP, SEXP left_openSEXP, SEXP right_openSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type DATE(DATESEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type left_bound(left_boundSEXP);
    Rcpp::traits::input_parameter< double >::type right_bound(right_boundSEXP);
    Rcpp::traits::input_parameter< bool >::type left_open(left_openSEXP);
    Rcpp::traits::input_parameter< bool >::type right_open(right_openSEXP);
    rcpp_result_gen = Rcpp::wrap(c_roll_sd(DATE, X, left_bound, right_bound, left_open, right_open));
    return rcpp_result_gen;
END_RCPP
}
// c_roll_sum
NumericVector c_roll_sum(SEXP DATE, NumericVector& X, double left_bound, double right_bound, bool left_open, bool right_open);
RcppExport SEXP _VSR_c_roll_sum(SEXP DATESEXP, SEXP XSEXP, SEXP left_boundSEXP, SEXP right_boundSEXP, SEXP left_openSEXP, SEXP right_openSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type DATE(DATESEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type left_bound(left_boundSEXP);
    Rcpp::traits::input_parameter< double >::type right_bound(right_boundSEXP);
    Rcpp::traits::input_parameter< bool >::type left_open(left_openSEXP);
    Rcpp::traits::input_parameter< bool >::type right_open(right_openSEXP);
    rcpp_result_gen = Rcpp::wrap(c_roll_sum(DATE, X, left_bound, right_bound, left_open, right_open));
    return rcpp_result_gen;
END_RCPP
}
// c_roll_prod
NumericVector c_roll_prod(SEXP DATE, NumericVector& X, double left_bound, double right_bound, bool left_open, bool right_open);
RcppExport SEXP _VSR_c_roll_prod(SEXP DATESEXP, SEXP XSEXP, SEXP left_boundSEXP, SEXP right_boundSEXP, SEXP left_openSEXP, SEXP right_openSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type DATE(DATESEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type left_bound(left_boundSEXP);
    Rcpp::traits::input_parameter< double >::type right_bound(right_boundSEXP);
    Rcpp::traits::input_parameter< bool >::type left_open(left_openSEXP);
    Rcpp::traits::input_parameter< bool >::type right_open(right_openSEXP);
    rcpp_result_gen = Rcpp::wrap(c_roll_prod(DATE, X, left_bound, right_bound, left_open, right_open));
    return rcpp_result_gen;
END_RCPP
}
// c_roll_first
NumericVector c_roll_first(SEXP DATE, NumericVector& X, double left_bound, double right_bound, bool left_open, bool right_open);
RcppExport SEXP _VSR_c_roll_first(SEXP DATESEXP, SEXP XSEXP, SEXP left_boundSEXP, SEXP right_boundSEXP, SEXP left_openSEXP, SEXP right_openSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type DATE(DATESEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type left_bound(left_boundSEXP);
    Rcpp::traits::input_parameter< double >::type right_bound(right_boundSEXP);
    Rcpp::traits::input_parameter< bool >::type left_open(left_openSEXP);
    Rcpp::traits::input_parameter< bool >::type right_open(right_openSEXP);
    rcpp_result_gen = Rcpp::wrap(c_roll_first(DATE, X, left_bound, right_bound, left_open, right_open));
    return rcpp_result_gen;
END_RCPP
}
// c_roll_last
NumericVector c_roll_last(SEXP DATE, NumericVector& X, double left_bound, double right_bound, bool left_open, bool right_open);
RcppExport SEXP _VSR_c_roll_last(SEXP DATESEXP, SEXP XSEXP, SEXP left_boundSEXP, SEXP right_boundSEXP, SEXP left_openSEXP, SEXP right_openSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type DATE(DATESEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type left_bound(left_boundSEXP);
    Rcpp::traits::input_parameter< double >::type right_bound(right_boundSEXP);
    Rcpp::traits::input_parameter< bool >::type left_open(left_openSEXP);
    Rcpp::traits::input_parameter< bool >::type right_open(right_openSEXP);
    rcpp_result_gen = Rcpp::wrap(c_roll_last(DATE, X, left_bound, right_bound, left_open, right_open));
    return rcpp_result_gen;
END_RCPP
}
// c_roll_quantile
NumericVector c_roll_quantile(SEXP DATE, NumericVector& X, double left_bound, double right_bound, bool left_open, bool right_open, double prob);
RcppExport SEXP _VSR_c_roll_quantile(SEXP DATESEXP, SEXP XSEXP, SEXP left_boundSEXP, SEXP right_boundSEXP, SEXP left_openSEXP, SEXP right_openSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type DATE(DATESEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type left_bound(left_boundSEXP);
    Rcpp::traits::input_parameter< double >::type right_bound(right_boundSEXP);
    Rcpp::traits::input_parameter< bool >::type left_open(left_openSEXP);
    Rcpp::traits::input_parameter< bool >::type right_open(right_openSEXP);
    Rcpp::traits::input_parameter< double >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(c_roll_quantile(DATE, X, left_bound, right_bound, left_open, right_open, prob));
    return rcpp_result_gen;
END_RCPP
}
// c_cummin
NumericVector c_cummin(const NumericVector& X);
RcppExport SEXP _VSR_c_cummin(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(c_cummin(X));
    return rcpp_result_gen;
END_RCPP
}
// c_cummax
NumericVector c_cummax(const NumericVector& X);
RcppExport SEXP _VSR_c_cummax(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(c_cummax(X));
    return rcpp_result_gen;
END_RCPP
}
// c_buy_sell_signal
NumericVector c_buy_sell_signal(NumericVector& X, double qenter_sell, double qexit_sell, double qenter_buy, double qexit_buy);
RcppExport SEXP _VSR_c_buy_sell_signal(SEXP XSEXP, SEXP qenter_sellSEXP, SEXP qexit_sellSEXP, SEXP qenter_buySEXP, SEXP qexit_buySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type qenter_sell(qenter_sellSEXP);
    Rcpp::traits::input_parameter< double >::type qexit_sell(qexit_sellSEXP);
    Rcpp::traits::input_parameter< double >::type qenter_buy(qenter_buySEXP);
    Rcpp::traits::input_parameter< double >::type qexit_buy(qexit_buySEXP);
    rcpp_result_gen = Rcpp::wrap(c_buy_sell_signal(X, qenter_sell, qexit_sell, qenter_buy, qexit_buy));
    return rcpp_result_gen;
END_RCPP
}
// top_index
IntegerVector top_index(SEXP x, int n, bool ascending);
RcppExport SEXP _VSR_top_index(SEXP xSEXP, SEXP nSEXP, SEXP ascendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< bool >::type ascending(ascendingSEXP);
    rcpp_result_gen = Rcpp::wrap(top_index(x, n, ascending));
    return rcpp_result_gen;
END_RCPP
}
// c_fast_paste0
std::vector< std::string > c_fast_paste0(std::vector<std::string>& str1, std::vector<std::string>& str2);
RcppExport SEXP _VSR_c_fast_paste0(SEXP str1SEXP, SEXP str2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type str1(str1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type str2(str2SEXP);
    rcpp_result_gen = Rcpp::wrap(c_fast_paste0(str1, str2));
    return rcpp_result_gen;
END_RCPP
}
// c_tab
List c_tab(SEXP x);
RcppExport SEXP _VSR_c_tab(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(c_tab(x));
    return rcpp_result_gen;
END_RCPP
}
// c_fill_locf_na
NumericVector c_fill_locf_na(NumericVector& x);
RcppExport SEXP _VSR_c_fill_locf_na(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(c_fill_locf_na(x));
    return rcpp_result_gen;
END_RCPP
}
// c_fill_locf_nonfinite
NumericVector c_fill_locf_nonfinite(NumericVector& x);
RcppExport SEXP _VSR_c_fill_locf_nonfinite(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(c_fill_locf_nonfinite(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_VSR_c_cumema", (DL_FUNC) &_VSR_c_cumema, 3},
    {"_VSR_c_ema", (DL_FUNC) &_VSR_c_ema, 3},
    {"_VSR_c_ema_lin", (DL_FUNC) &_VSR_c_ema_lin, 3},
    {"_VSR_c_ediversity", (DL_FUNC) &_VSR_c_ediversity, 3},
    {"_VSR_c_cum_unique_count", (DL_FUNC) &_VSR_c_cum_unique_count, 2},
    {"_VSR_c_rdmean_pow", (DL_FUNC) &_VSR_c_rdmean_pow, 3},
    {"_VSR_c_apk1", (DL_FUNC) &_VSR_c_apk1, 3},
    {"_VSR_c_ob_margin", (DL_FUNC) &_VSR_c_ob_margin, 3},
    {"_VSR_c_ob_exp_sum", (DL_FUNC) &_VSR_c_ob_exp_sum, 5},
    {"_VSR_c_roll_min", (DL_FUNC) &_VSR_c_roll_min, 6},
    {"_VSR_c_roll_max", (DL_FUNC) &_VSR_c_roll_max, 6},
    {"_VSR_c_roll_mean", (DL_FUNC) &_VSR_c_roll_mean, 6},
    {"_VSR_c_roll_sd", (DL_FUNC) &_VSR_c_roll_sd, 6},
    {"_VSR_c_roll_sum", (DL_FUNC) &_VSR_c_roll_sum, 6},
    {"_VSR_c_roll_prod", (DL_FUNC) &_VSR_c_roll_prod, 6},
    {"_VSR_c_roll_first", (DL_FUNC) &_VSR_c_roll_first, 6},
    {"_VSR_c_roll_last", (DL_FUNC) &_VSR_c_roll_last, 6},
    {"_VSR_c_roll_quantile", (DL_FUNC) &_VSR_c_roll_quantile, 7},
    {"_VSR_c_cummin", (DL_FUNC) &_VSR_c_cummin, 1},
    {"_VSR_c_cummax", (DL_FUNC) &_VSR_c_cummax, 1},
    {"_VSR_c_buy_sell_signal", (DL_FUNC) &_VSR_c_buy_sell_signal, 5},
    {"_VSR_top_index", (DL_FUNC) &_VSR_top_index, 3},
    {"_VSR_c_fast_paste0", (DL_FUNC) &_VSR_c_fast_paste0, 2},
    {"_VSR_c_tab", (DL_FUNC) &_VSR_c_tab, 1},
    {"_VSR_c_fill_locf_na", (DL_FUNC) &_VSR_c_fill_locf_na, 1},
    {"_VSR_c_fill_locf_nonfinite", (DL_FUNC) &_VSR_c_fill_locf_nonfinite, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_VSR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
